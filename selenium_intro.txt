1. Install and basic setup

2. Load URL browser navigation (driver.naviagte().back())

3. Work with common objects like Drop-down, text fields, links (tagname=a, .linkText), buttons

4. Use Alert class for Popups

5. Switch between windows using SwitchTo() and GetHandle() methods

6. Use Mouse and Keyboard functions (sendkeys)

7. Display elements and Disappearance (handle.getCssValue(display| visibility), WebDriverWait().until()

8. Screenshots (Interface TakesScreenshot.getScreenshotAs(xx.png | file))

9. Working with Javascript and Ajax, Cookies
  - JavaScriptExecutor interface using methods executeScript or executeAsyncScript
	https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/JavascriptExecutor.html

  - Ajax using wait using WebDriverWait(driver, 5sec)
     waiter.until(new ExpectedCondition(boolean)) {
     	public Boolean apply(WebDriver driver) {
     		return ! results.getText().isEmpty(); 
     		// OR results.getText().equalsIgnoreCase("Loading");
     	}
     });
     
  - Cookies are read by using driver.manage().getCookies()
   Look at the cookie class in Selenium
   https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/Cookie.html
   
10. Listen for Events 
  - EventFiringWebDriver class use the driver.register(new class)  The new class will implemet the
  	AbstractWebDriverEventListener class and override the methods as neeed. e.g. beforeClickOn, afterClickOn 

11. Cross-browser Tests by swap out the WebDriver class to IE, Edge or Chrome. Use Selenium Grid to invoke
  the -role hub (or -role node) server to execute tests in parallel. The tests will use the RemoteWebDriver class.
  Examples are to run Hub use:
	 java -jar selenium-standalone-server=xxx.jar -role hub
  Example to run as Firwfox node:
	 java -jar  selenium-standalone-server=xxx.jar -role node -browser browserName=firefox __
		firefox.versio=XX -hub http://localhost:4444/grid/register 
  Example to run as Chrome node:
	 java -Dwebdriver.chrome.driver="path/To/chromeDriver.exe" -jar  selenium-standalone-server=xxx.jar  __
		-role node -hub http://localhost:4444/grid/register -browser browserNmame=chrome -port 5556

 12. Test Design Patterns (security, validation, images)
  - Usaebility pattern (508?)
  - Build helper functions for common tasks like Login
  - Use tools within Selenium like entending RunListener()
  - Externalize test data in file or database


WebDriver Interface
=====================
Alert
Capabilities
ContextAware
HasCapabilities
JavaScriptExecutor
OutputType<T>
Rotatble
SearchContext
TakesScreenshot
WebDriver
WebDriver.ImeHandler
WebDriver.Navigation
WebDriver.Options
WebDriver.TargetLocator
WebDriver.Timeouts
WebDriver.Window
WebElement
WrapsDriver
WrapsElement

Interactions
===========
Action
Encodable
HasInputDevices
InputSource
IsINteraction
Keyboard
Locatable
Mouse
TouchScreen

folders can be ajax, alerts, capture, cookies, design, find, grid, input, javascript,
  links, listener, login, move, navigation, recording, visual

